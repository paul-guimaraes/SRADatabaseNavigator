#!/usr/bin/env python3

import csv
from data.database import Database
from os import path
import matplotlib.pyplot as plt
from configparser import RawConfigParser
from venn import venn

from argparse import ArgumentParser
args = ArgumentParser()
args.add_argument('--work_directory', help='Directory where is the present_values.csv generated by check_community.py script.')
args = args.parse_args()

with open(path.join(path.dirname(path.realpath(__file__)), 'config.ini'), 'r') as config_file:
    configparser = RawConfigParser()
    configparser.read_file(config_file)
    database = Database(
        host=configparser['database']['host'],
        port=configparser['database']['port'],
        database=configparser['database']['name'],
        user=configparser['database']['user'],
        password=configparser['database']['password'],
    )

directory = args.work_directory
with (open(path.join(directory, 'present_values.csv'), 'r') as input_file,
      open(path.join(directory, 'present_values_with_studied.csv'), 'w') as output_file):
    csv_reader = csv.reader(input_file)
    header = next(csv_reader)

    accessions = {}
    for row in csv_reader:
        record = dict(zip(header, row))
        if record['node'] not in accessions:
            accessions[record['node']] = {'strategies': set(), 'sources': set(), 'studies': set()}

    sample_values = database.get_values_from_table_by_value(
        schema='public',
        table='experiment_package_sample',
        column='accession',
        value=set(accessions.keys()),
    )

    ids = [i['internal_id'] for i in sample_values]

    for study in database.get_table_related_data(
            table='experiment_package_sample',
            reference_table='experiment_package_study',
            table_internal_id=ids,
            table_columns_filter=None):
        accessions[study['experiment_package_sample_accession'].lower()]['studies'].add(
            study['experiment_package_study_accession'].lower())

    for design_library in database.get_table_related_data(
            table='experiment_package_sample',
            reference_table='experiment_package_experiment_design_library_descriptor',
            table_internal_id=ids,
            table_columns_filter=None):
        accessions[design_library['experiment_package_sample_accession'].lower()]['strategies'].add(
            design_library['experiment_package_experiment_design_library_descriptor_library_strategy'].lower())
        accessions[design_library['experiment_package_sample_accession'].lower()]['sources'].add(
            design_library['experiment_package_experiment_design_library_descriptor_library_source'].lower())

    input_file.seek(0)
    header = next(csv_reader)
    csv_writer = csv.writer(output_file)
    csv_writer.writerow(['study_accession', 'strategy', 'source'] + header)

    present_strategies = set()
    for row in csv_reader:
        record = dict(zip(header, row))

        accession = record['node']
        present_strategies |= accessions[accession]['strategies']
        studies = '; '.join(sorted(accessions[accession]['studies']))
        strategies = '; '.join(sorted(accessions[accession]['strategies']))
        sources = '; '.join(sorted(accessions[accession]['sources']))
        csv_writer.writerow([studies, strategies, sources] + row)

    for strategy in present_strategies:
        input_file.seek(0)
        header = next(csv_reader)
        columns = ['study_accession', 'strategy', 'source'] + header
        records = {column: [] for column in columns}
        for row in csv_reader:
            record = dict(zip(header, row))
            accession = record['node']
            if strategy in accessions[accession]['strategies']:
                studies = '; '.join(sorted(accessions[accession]['studies']))
                records['study_accession'].append(studies)
                strategies = '; '.join(sorted(accessions[accession]['strategies']))
                records['strategy'].append(strategies)
                sources = '; '.join(sorted(accessions[accession]['sources']))
                records['source'].append(sources)
                for column in header:
                    records[column].append(record[column])
        temp = []
        for column in records:
            remove = True
            for value in records[column]:
                if len(value) > 0:
                    remove = False
                    break
            if remove:
                temp.append(column)
        for column in temp:
            del records[column]
        with open(path.join(directory, f'present_values_with_studied_{strategy}.csv'), 'w') as strategy_output_file:
            csv_writer = csv.writer(strategy_output_file)
            csv_writer.writerow([column for column in columns if column in records])
            for i, _ in enumerate(records[columns[0]]):
                record = []
                for column in [column for column in columns if column in records]:
                    record.append(records[column][i])
                csv_writer.writerow(record)

strategy_samples = {}
strategy_studies = {}
for accession in accessions:
    for strategy in accessions[accession]['strategies']:
        if strategy not in strategy_samples:
            strategy_samples[strategy] = set()
        if strategy not in strategy_studies:
            strategy_studies[strategy] = set()
        strategy_samples[strategy].add(accession)
        for study in accessions[accession]['studies']:
            strategy_studies[strategy].add(study)

with open(path.join(directory, 'strategies_quantity.csv'), 'w') as output_file:
    writer = csv.writer(output_file)
    writer.writerow(['strategy', 'samples', 'studies'])
    for strategy in sorted(strategy_samples):
        writer.writerow([strategy, len(strategy_samples[strategy]), len(strategy_studies[strategy])])

names_strategies = ['rna-seq', 'wxs']
current_set = {i: strategy_samples[i] for i in names_strategies if i in strategy_samples}
if len(current_set) > 1:
    venn(current_set)
    plt.savefig(path.join(directory, f'strategies_samples.png'), dpi=600)
    plt.savefig(path.join(directory, f'strategies_samples.svg'))
    plt.close()

current_set = {i: strategy_studies[i] for i in names_strategies if i in strategy_studies}
if len(current_set) > 1:
    venn(current_set)
    plt.savefig(path.join(directory, f'strategies_studies.png'), dpi=600)
    plt.savefig(path.join(directory, f'strategies_studies.svg'))
    plt.close()
